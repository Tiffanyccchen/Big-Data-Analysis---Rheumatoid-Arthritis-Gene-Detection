datasnp1<-fread("C:/Users/user/Desktop/BDA/data/datasnp1.csv",header=T,sep=",",na.strings="?_?")
datasnp2<-fread("C:/Users/user/Desktop/BDA/data/datasnp2.csv",header=T,sep=",",na.strings="?_?")
datasnp3<-fread("C:/Users/user/Desktop/BDA/data/datasnp3.csv",header=T,sep=",",na.strings="?_?")
datasnp4<-fread("C:/Users/user/Desktop/BDA/data/datasnp4.csv",header=T,sep=",",na.strings="?_?")
datasnp5<-fread("C:/Users/user/Desktop/BDA/data/datasnp5.csv",header=T,sep=",",na.strings="?_?")
datafirst9<-fread("C:/Users/user/Desktop/BDA/data/naracvarsplit/datafirst9.csv",header=T,sep=",",na.strings="?")
dataselectmerge<-fread("C:/Users/user/Desktop/BDA/data/dataselectmerge.csv",header=T,sep=",")

rm(list=ls())
gc()
setDF(dataselectmerge)
dataselectmerge<-dataselectmerge[,-c(1:9)]


433188/2000
2000*216
for(i in 2:216){
aa<-dataselectmerge[,c(sample(1:(433188-2000*(i-1)),2000))]
write.csv(aa, file=paste0('snp.', i, '.csv'))
dataselectmerge<-dataselectmerge[,-c(sample(1:(433188-2000*(i-1)),2000))]
}
dim(dataselectmerge)
write.csv(dataselectmerge, file=paste0('snp.', 217, '.csv'))

#impute snp.6...
snp6<-fread("C:/Users/user/Desktop/snp.6.csv",header=T,sep=",")
setDF(snp6)
snp6<-snp6[,-1]
a<-colnames(snp6)
a<-as.vector(a)
a[1]
str(a)

snp5ch<-which(colnames(dataselectmerge)==a)
str(snp5ch)

datatest<-subset(dataselectmerge,select=c(a))
dim(datatest)

write.csv(datatest,file=paste0('snp.', 6, '.csv'))

# set working directory
setwd("C:/Users/user/Desktop")
 
# list all csv files from the current directory
list.files(pattern=".csv$") # use the pattern argument to define a common pattern  for import files with regex. Here: .csv
 
# create a list from these files
list.filenames<-list.files(pattern=".csv$")
list.filenames
 
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
 
# create a loop to read in your data
for (i in 1:length(list.filenames)){
list.data[[i]]<-fread(list.filenames[i])
}
summary(list.data)

#convert into dataframe-----------------------------------------
str(list.data[1])
df1<-list.data[1]
df1<-as.data.frame(df1)

df1<-df1[,-c(1)]
str(df1)

#missing value impute----
library(Amelia)
library(mice)
library(ggplot2)
library(lattice)
gc()
df1 <- mice(df1,
                  m = 1,           # 產生三個被填補好的資料表
                  method="cart",# 使用CART決策樹，進行遺漏值預測
                  seed = 188)      # set.seed()，令抽樣每次都一樣

# 原始資料(有遺漏值)
df1<- complete(df1, 1)
dim(df1)

missmap(df1, col=c('grey', 'steelblue'), y.cex=0.5, x.cex=0.8)

#analyze-------------------------------------------------------
df1<-cbind(datafirst9$Affection,df1)
df1[] <- lapply( df1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(df1)
colnames(df1)[1] <- "Affection"

str(df1)

object.size() #38Mb, no problem

require(randomForest)

#start small, and scale up slowly
rf=randomForest(Affection ~ . , data =df1  ,importane = T,proximity = T, do.trace = 200,ntree=1000)

print(rf)

plot(rf,main="1st 1000 snps set")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf, log="y")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf$err.rate),col=1:4,cex=0.8,fill=1:4)

rn <- round(importance(rf), 2)
rn[order(rn[,1], decreasing=TRUE),][1:10]
varImpPlot(rf,type=2,main="Variable Importance 1st 1000 snps")
df1<-subset(df1, select=c("rs1887404","rs7520521","rs4081356","rs11209214","rs344916","rs344934"))
dim(df1)
str(df1)
fwrite(df1,"2sel.csv")


#split data by row-----------------------------
chunk <- 1000
n <- 84224
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
d <- split(datasnp1,r)
summary(d[[1]])

lapply(seq_along(d), function(i) 
   write.csv(d[[i]], file=paste0('snp1.', i, '.csv')))


ma <- cbind(x = 1:10, y = (-4:5)^2)
split(ma, )