rm(list=ls())
gc()
datafirst9<-fread("C:/Users/user/Desktop/BDA/data/naracvarsplit/datafirst9.csv",header=T,sep=",",na.strings="?")

# set working directory
setwd("C:/Users/user/Desktop")
 
# list all csv files from the current directory
list.files(pattern=".csv$") # use the pattern argument to define a common pattern  for import files with regex. Here: .csv
 
# create a list from these files
list.filenames<-list.files(pattern=".csv$")
 
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
 
# create a loop to read in your data
require(data.table)
for (i in 1:length(list.filenames)){
gc()
list.data[[i]]<-fread(list.filenames[i])
}


gc()
#convert into dataframe-----------------------------------------

gc()
library(Amelia)
library(mice)
library(ggplot2)
library(lattice)
library(dplyr)
require(randomForest)

for(i in 10:44){
gc()
df1<-list.data[i]
df1<-as.data.frame(df1)
df1<-df1[,-c(1,2)]

#analyze-------------------------------------------------------
df1<-cbind(datafirst9$Affection,df1)
df1[] <- lapply( df1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(df1)
colnames(df1)[1] <- "Affection"
assign(paste("df",i,sep=""),df1)

gc()
#start small, and scale up slowly
a<-lapply( paste('df', i, sep=''), get )
a<-data.frame(a)

gc()
rf=randomForest(Affection ~ . , data =df1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)
assign(paste("rf",i,sep=""), rf)

nam4 <- paste("rn", i, sep = "")
assign(nam4,
round(importance(rf), 2)[order(round(importance(rf), 2)[,1], decreasing=TRUE),][1:100])

gc()
dd<-sapply( paste0('rn', i, sep=''), get )
b<-names(dd[,1])
b<-as.vector(b)
a<-subset(a, select=b)
dim(a)
gc()
write.csv(a, file=paste0(i,'seltran' , '.csv'))
}


#select variables------------------------------------------
rf7
rn7

names(a)[1:10]

b<-names(rn7[1:5])
b<-as.vector(b)
df7<-subset(df7, select=b)
dim(df7)
fwrite(df7,"7sel.csv")


#plot-------------------------------------------------------------
gc()
rf4
plot(rf4,main="sample.4 10000 snps set")
layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
plot(rf4,log="y",main="sample.4 10000 snps set")
par(mar=c(5,4,4,0)) #No margin on the right side
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf4$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf4,type=2,main="Variable Importance sample.4 10000 snps")


#missing value impute---
gc()
df1 <- mice(df1,
                  m = 1,           # 產生三個被填補好的資料表
                  method="cart",# 使用CART決策樹，進行遺漏值預測
                  seed = 188)      # set.seed()，令抽樣每次都一樣
df1<- complete(df1, 1)
gc()

##read and analyze for comparison----------------------------------------------------
snpori1<-fread("C:/Users/user/Desktop/snp.1.csv",header=T,sep=",",na.strings=c("","NA"))
snpori2<-fread("C:/Users/user/Desktop/snp.2.csv",header=T,sep=",",na.strings=c("","NA"))
snptran1<-fread("C:/Users/user/Desktop/snptran1.csv",header=T,sep=",")
snptran2<-fread("C:/Users/user/Desktop/snptran2.csv",header=T,sep=",")
dim(snpori1)
str(snpori1)
snpori1<-snpori1[,-2]
snpori1<-cbind(datafirst9$Affection,snpori1)
snpori1[] <- lapply( snpori1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(snpori1)
colnames(snpori1)[1] <- "Affection"


gc()
rf=randomForest(Affection ~ . , data =snptran1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)
rf

dim(snptran1)
str(snptran1)
snptran1<-snptran1[,-c(1,2)]
snptran1<-cbind(datafirst9$Affection,snptran1)
snptran1[] <- lapply( snptran1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(snptran1)
colnames(snptran1)[1] <- "Affection"
rftran=randomForest(Affection ~ . , data =snptran1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)
rftran


gc()
rf=randomForest(Affection ~ . , data =snpori1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)







