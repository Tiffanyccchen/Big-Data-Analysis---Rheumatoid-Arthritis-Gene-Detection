#read 44 10000snps dataset---------------------------------------
rm(list=ls())
require(data.table)
datafirst9<-fread("C:/Users/user/Desktop/BDA/data/naracvarsplit/datafirst9.csv",header=T,sep=",",na.strings="?")
library(SNPassoc)
# set working directory
setwd("C:/Users/user/Desktop")

 
# list all csv files from the current directory
list.files(pattern=".csv$") # use the pattern argument to define a common pattern  for import files with regex. Here: .csv
 
# create a list from these files
list.filenames<-list.files(pattern=".csv$")
 
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
 
# create a loop to read in your data

for (i in 1:length(list.filenames)){
gc()
list.data[[i]]<-fread(list.filenames[i])
}
gc()


#analyze-------------------------------------------------------
for(i in 1:44){
gc()
sel<-list.data[i]
sel<-as.data.frame(sel)
sel<-sel[,-c(1)]
is.na(sel) <- sel==""
sel<-cbind(datafirst9$Affection,sel)

sel[] <- lapply( sel, factor) # the [] keeps the dataframe structure
col_names <- names(sel)
colnames(sel)[1] <- "Affection"

sel[] <- lapply(sel, gsub, pattern = "A_G", replacement = "AG", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "G_A", replacement = "AG", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "G_G", replacement = "GG", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "A_A", replacement = "AA", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "C_T", replacement = "CT", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "T_C", replacement = "TC", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "C_C", replacement = "CC", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "T_T", replacement = "TT", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "A_C", replacement = "AC", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "C_A", replacement = "AC", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "T_G", replacement = "GT", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "G_T", replacement = "GT", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "A_T", replacement = "AT", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "T_A", replacement = "AT", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "C_G", replacement = "CG", fixed = TRUE)
sel[] <- lapply(sel, gsub, pattern = "G_C", replacement = "CG", fixed = TRUE)


#Prior the transformation you should exchange 00 or --- to NA with something lik
sel[ sel == 00 ] <- NA
sel[ sel == "--" ] <- NA
#Use the additive function and apply to create a numerical variable.

mydatnum <-apply(sel,2,additive)
write.csv(mydatnum, file=paste0('snptran', i, '.csv'))
}

rm(list=ls())
gc()
datafirst9<-fread("C:/Users/user/Desktop/BDA/data/naracvarsplit/datafirst9.csv",header=T,sep=",",na.strings="?")

# set working directory
setwd("C:/Users/user/Desktop")
 
# list all csv files from the current directory
list.files(pattern=".csv$") # use the pattern argument to define a common pattern  for import files with regex. Here: .csv
 
# create a list from these files
list.filenames<-list.files(pattern=".csv$")
 
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
 
# create a loop to read in your data
require(data.table)
for (i in 1:length(list.filenames)){
gc()
list.data[[i]]<-fread(list.filenames[i])
}


gc()
#convert into dataframe-----------------------------------------

gc()
library(Amelia)
library(mice)
library(ggplot2)
library(lattice)
library(dplyr)
require(randomForest)

for(i in 10:44){
gc()
df1<-list.data[i]
df1<-as.data.frame(df1)
df1<-df1[,-c(1,2)]

#analyze-------------------------------------------------------
df1<-cbind(datafirst9$Affection,df1)
df1[] <- lapply( df1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(df1)
colnames(df1)[1] <- "Affection"
assign(paste("df",i,sep=""),df1)

gc()
#start small, and scale up slowly
a<-lapply( paste('df', i, sep=''), get )
a<-data.frame(a)

gc()
rf=randomForest(Affection ~ . , data =df1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)
assign(paste("rf",i,sep=""), rf)

nam4 <- paste("rn", i, sep = "")
assign(nam4,
round(importance(rf), 2)[order(round(importance(rf), 2)[,1], decreasing=TRUE),][1:100])

gc()
dd<-sapply( paste0('rn', i, sep=''), get )
b<-names(dd[,1])
b<-as.vector(b)
a<-subset(a, select=b)
dim(a)
gc()
write.csv(a, file=paste0(i,'seltran' , '.csv'))
}


#select variables------------------------------------------
rf7
rn7

names(a)[1:10]

b<-names(rn7[1:5])
b<-as.vector(b)
df7<-subset(df7, select=b)
dim(df7)
fwrite(df7,"7sel.csv")


#plot-------------------------------------------------------------
gc()
rf4
plot(rf4,main="sample.4 10000 snps set")
layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
plot(rf4,log="y",main="sample.4 10000 snps set")
par(mar=c(5,4,4,0)) #No margin on the right side
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf4$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf4,type=2,main="Variable Importance sample.4 10000 snps")


#missing value impute---
gc()
df1 <- mice(df1,
                  m = 1,           # 產生三個被填補好的資料表
                  method="cart",# 使用CART決策樹，進行遺漏值預測
                  seed = 188)      # set.seed()，令抽樣每次都一樣
df1<- complete(df1, 1)
gc()

##read and analyze for comparison----------------------------------------------------
snpori1<-fread("C:/Users/user/Desktop/snp.1.csv",header=T,sep=",",na.strings=c("","NA"))
snpori2<-fread("C:/Users/user/Desktop/snp.2.csv",header=T,sep=",",na.strings=c("","NA"))
snptran1<-fread("C:/Users/user/Desktop/snptran1.csv",header=T,sep=",")
snptran2<-fread("C:/Users/user/Desktop/snptran2.csv",header=T,sep=",")
dim(snpori1)
str(snpori1)
snpori1<-snpori1[,-2]
snpori1<-cbind(datafirst9$Affection,snpori1)
snpori1[] <- lapply( snpori1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(snpori1)
colnames(snpori1)[1] <- "Affection"


gc()
rf=randomForest(Affection ~ . , data =snptran1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)
rf

dim(snptran1)
str(snptran1)
snptran1<-snptran1[,-c(1,2)]
snptran1<-cbind(datafirst9$Affection,snptran1)
snptran1[] <- lapply( snptran1, factor) # the "[]" keeps the dataframe structure
 col_names <- names(snptran1)
colnames(snptran1)[1] <- "Affection"
rftran=randomForest(Affection ~ . , data =snptran1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)
rftran


gc()
rf=randomForest(Affection ~ . , data =snpori1,importane = T,proximity = T,ntree=1000, na.action=na.roughfix)


#my path

setwd("C:/Users/user/Desktop")
datafirst9<-fread("C:/Users/user/Desktop/BDA/data/naracvarsplit/datafirst9.csv",header=T,sep=",",na.strings="?")
 
# list all csv files from the current directory
list.files(pattern=".csv$") # use the pattern argument to define a common pattern  for import files with regex. Here: .csv
 
# create a list from these files
list.filenames<-list.files(pattern=".csv$")
 
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
 
# create a loop to read in your data
require(data.table)
for (i in 1:length(list.filenames)){
gc()
list.data[[i]]<-fread(list.filenames[i])
}


gc()
#convert into dataframe-----------------------------------------

for(i in 1:44){
gc()
df<-list.data[i]
df<-as.data.frame(df)
assign(paste("df",i,sep=""),df)
}
dim(df1)


#merge data---------------------------------------------------
select<-as.matrix(rep(1,2062),ncol=1)
select<-data.frame(select)
dim(select)
for(i in 1:44){
a<-lapply( paste('df', i, sep=''), get )
a<-data.frame(a)
a<-a[,-c(1)]
select<-cbind(select,a)
}
select<-select[,-1]
dim(select)
select<-data.frame(select)
str(select)

#remove duplicate columns-------------------------------------
ss <- select[, !duplicated(colnames(select))]
dim(ss)
ss[is.na(ss)] <- "?_?"
write.csv(ss,"selectsnps.csv")
select<-ss

#random forest analyze----------------------------------------
select<-fread("C:/Users/user/Desktop/selectsnpstran.csv",header=T,sep=",",na.strings=c("?_?","NA"))
selectsnps<-cbind(datafirst9$Affection,select)
str(selectsnps)
selectsnps<-selectsnps[,-c(2)]
selectsnps[] <- lapply( selectsnps, factor) # the "[]" keeps the dataframe structure
 col_names <- names(selectsnps)
colnames(selectsnps)[1] <- "Affection"

gc()

rf=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rf


#plot---------------------------------------------------------
plot(rf,main="selected 4400(recode) snps set")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf, log="y",main="selected 4400(recode)snps set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf,type=2,main="Variable Importance selected 4400 snps")

#rf(origin)compare-----------------------------------------------
selectori<-fread("C:/Users/user/Desktop/selectsnps.csv",header=T,sep=",",na.strings=c("","NA"))
selectori<-cbind(datafirst9$Affection,selectori)
selectori[] <- lapply( selectori, factor) # the "[]" keeps the dataframe structure
 col_names <- names(selectori)
colnames(selectori)[1] <- "Affection"
str(selectori)
selectori<-selectori[,-c(2)]

rfori=randomForest(Affection ~ . , data =selectori,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfori

#4400 recode:
(21.29+21.44+21.05+20.85+21)/5
(17.42+17.42+16.92+16.42+16.4)/5
(26.61+26.96+26.73+26.96+27.3)/5

#4400 origin:
(21.52+21+21.44+21.34+21.53)/5
(16.92+16.33+17.34+17+17.8)/5
(28+27.42+27.07+27.3+26.7)/5

plot(rfori,main="select 4400 snps set")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rfori, log="y",main="select 4400 snps set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rfori$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rfori,type=2,main="Variable Importance selected snps set")

gc()
time.temp = proc.time()
result <- replicate(50, rfcv(selectsnps[,-c(1)],selectsnps[,1], 
cv.fold=5, scale="log", step=0.5, recursive=FALSE), simplify=FALSE)
error.cv <- sapply(result, "[[", "error.cv")
proc.time()	- time.temp

matplot(result[[1]]$n.var,rowMeans(error.cv), type="o",
lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
 xlab="Number of snps", ylab="CV Error",main="select vars/wrapper var. selection",xaxt="n",ylim=c(0,0.4))
axis(side=1, at=c(4400,2200,1100,550,275,137,69,34,17,9,4,2,1))

result[[50]]$error.cv
cvselect<-rep(1,13)
for(i in 1:50){
cvselect<-cbind(cvselect,result[[i]]$error.cv)
}
dim(cvselect)
cvselect<-data.frame(cvselect)
cvselect<-cvselect[,-c(1)]
cvselect<-t(cvselect)
write.csv(cvselect,"cvselecttran.csv")
cvselect<-fread("C:/Users/user/Desktop/cvselecttran.csv",header=T,sep=",")
cvselect[,1]

# Boxplot of cv----------------------------------------------
selectvarplot<-boxplot(cvselect, main="snps select by cv.error(recode)/50 times each var.num.(wrapper method)", 
  	xlab="Number of snps", ylab="Error Rate",ylim=c(0.2,0.35))
axis(side=1, at=c(1,2,4,9,17,34,69,137,275,550,1100,2200,4400))

#choose m-----------------------------------------------------------------------
resultp/2 <- rfcv(selectsnps[,-c(1)],selectsnps[,1], 
cv.fold=5, scale="log", step=0.5,mtry=function(p)(p/2) ,recursive=FALSE)
matplot(result.p/2[[1]]$n.var,cbind(error.cv,cv.slect[,1]), type="o",
lwd=c(2, rep(1, ncol(error.cv))), col=1, lty=1, log="x",
 xlab="Number of snps", ylab="CV Error",main="select vars/wrapper var. selection",xaxt="n",ylim=c(0,0.4))


#select first 137 snps plot---------------------------------------------------------
rf=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=5000)
rf

plot(rf,main="")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf, log="y",main="selected 4400 snps set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf,type=2,main="Variable Importance selected 4400 snps set")

rn <- round(importance(rf), 2)
snpss<-rn[order(rn[,1], decreasing=T),][1:137]
str(snpss)
rn[1]
name137<-names(snpss)
name137<-as.vector(name137)
str(name137)
select137<-selectsnps[ , which(names(selectsnps) %in% name137)]
select137<-setDF(select137)
dim(select137)
write.csv(select137,"select137.csv")

#rf137--------------------------------------------
select137<-fread("C:/Users/user/Desktop/select137tran.csv",header=T,sep=",",na.strings=c("?_?","NA"))
select137<-cbind(datafirst9$Affection,select137)
select137[] <- lapply( select137, factor) # the "[]" keeps the dataframe structure
 col_names <- names(select137)
colnames(select137)[1] <- "Affection"
select137<-select137[,-c(2)]
str(select137)
 
rf137=randomForest(Affection ~ . , data =select137,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rf137


plot(rf137,main="select 137 snps(recode) set")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf137, log="y",main="select 137 snps(recode) set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf137$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf137,type=2,main="Variable Importance selected 137 snps (recode) set")

#rf(origin)compare-----------------------------------------------
select137ori<-fread("C:/Users/user/Desktop/select137.csv",header=T,sep=",",na.strings=c("","NA"))
select137ori<-cbind(datafirst9$Affection,select137ori)
select137ori[] <- lapply( select137ori, factor) # the "[]" keeps the dataframe structure
 col_names <- names(select137ori)
colnames(select137ori)[1] <- "Affection"
str(select137ori)
select137ori<-select137ori[,-c(2,3)]

rf137ori=randomForest(Affection ~ . , data =select137ori,do.trace=5000,importane = T,proximity = T,ntree=5000,na.action=na.roughfix)
rf137ori


plot(rf137ori,main="select 137 snps set")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf137ori, log="y",main="select 137 snps set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf137ori$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf137ori,type=2,main="Variable Importance selected 137 snps set")

select137<-fread("C://Users/user/Desktop/select137tran.csv",header=T,sep=",",na.strings="?_?")
str(select137)
dim(select137)
setDT(select137)
for (jj in 1:ncol(select137)) set(select137, i = which(select137[[jj]]=="2"), j = jj, v = 1)
setDF(select137)
str(select137)
select137<-select137[,-1]
selectsnps<-cbind(datafirst9$Affection,select137)
selectsnps[] <- lapply( selectsnps, factor) # the "[]" keeps the dataframe structure
 col_names <- names(selectsnps)
colnames(selectsnps)[1] <- "Affection"

gc()
#random forest analyze----------------------------------------
rfdominante=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfdominante1=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfdominante2=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfdominante3=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfdominante4=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)




select137<-fread("C://Users/user/Desktop/select137tran.csv",header=T,sep=",",na.strings="?_?")
str(select137)
dim(select137)
setDT(select137)
for (jj in 1:ncol(select137)) set(select137, i = which(select137[[jj]]=="0"), j = jj, v = 1)
setDF(select137)
str(select137)
select137<-select137[,-1]
selectsnps<-cbind(datafirst9$Affection,select137)
selectsnps[] <- lapply( selectsnps, factor) # the "[]" keeps the dataframe structure
 col_names <- names(selectsnps)
colnames(selectsnps)[1] <- "Affection"

rfrecessive=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfrecessive1=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfrecessive2=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfrecessive3=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)
rfrecessive4=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=5000,proximity = T,ntree=5000,na.action=na.roughfix)

#4400-----------

select4400<-fread("C://Users/user/Desktop/selectsnpstran.csv",header=T,sep=",",na.strings="?_?")
str(select4400)
dim(select4400)
setDT(select4400)
for (jj in 1:ncol(select4400)) set(select4400, i = which(select4400[[jj]]=="2"), j = jj, v = 1)
setDF(select4400)
str(select4400)
select4400<-select4400[,-1]
selectsnps<-cbind(datafirst9$Affection,select4400)
selectsnps[] <- lapply( selectsnps, factor) # the "[]" keeps the dataframe structure
 col_names <- names(selectsnps)
colnames(selectsnps)[1] <- "Affection"

gc()
#random forest analyze----------------------------------------
rfdominante=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfdominante1=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfdominante2=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfdominante3=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfdominante4=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)




select4400<-fread("C://Users/user/Desktop/selectsnpstran.csv",header=T,sep=",",na.strings="?_?")
str(select4400)
dim(select4400)
setDT(select4400)
for (jj in 1:ncol(select4400)) set(select4400, i = which(select4400[[jj]]=="0"), j = jj, v = 1)
setDF(select4400)
str(select4400)
select4400<-select4400[,-1]
selectsnps<-cbind(datafirst9$Affection,select4400)
selectsnps[] <- lapply( selectsnps, factor) # the "[]" keeps the dataframe structure
 col_names <- names(selectsnps)
colnames(selectsnps)[1] <- "Affection"
str(selectsnps)

rfrecessive=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfrecessive1=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfrecessive2=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfrecessive3=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)
rfrecessive4=randomForest(Affection ~ . , data =selectsnps,importane = T,do.trace=1000,proximity = T,ntree=1000,na.action=na.roughfix)


#my path

setwd("C:/Users/user/Desktop")

 
# list all csv files from the current directory
list.files(pattern=".csv$") # use the pattern argument to define a common pattern  for import files with regex. Here: .csv
 
# create a list from these files
list.filenames<-list.files(pattern=".csv$")
 
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
 
# create a loop to read in your data
require(data.table)
for (i in 1:length(list.filenames)){
gc()
list.data[[i]]<-fread(list.filenames[i])
}


gc()
#convert into dataframe-----------------------------------------

for(i in 1:44){
gc()
df<-list.data[i]
df<-as.data.frame(df)
assign(paste("df",i,sep=""),df)
}
dim(df1)


#merge data---------------------------------------------------
select<-as.matrix(rep(1,2062),ncol=1)
select<-data.frame(select)
dim(select)
for(i in 1:44){
a<-lapply( paste('df', i, sep=''), get )
a<-data.frame(a)
a<-a[,-c(1,2)]
select<-cbind(select,a)
}
select<-select[,-1]
dim(select)
select<-data.frame(select)
str(select)

#remove duplicate columns-------------------------------------
ss <- select[, !duplicated(colnames(select))]
dim(ss)
write.csv(ss,"dataselectmergetran.csv")
select<-ss

require(ranger)
require(data.table)
dataselectmerge<-fread("/home/team3/dataselectmerge.csv",header=T,sep=",")

a<-which(names(dataselectmerge)=="Affection1")
dataselectmerge<-subset(dataselectmerge,select=-a)
dim(dataselectmerge)
dataselectmerge<-dataselectmerge[,-c(1,3,4,5,6,7,8,9)]
sel<-dataselectmerge

sel[] <- lapply( sel, factor) # the "[]" keeps the dataframe structure
col_names <- names(sel)
colnames(sel)[1] <- "Affection"


rf=ranger(data=sel,num.trees = 5000,mtry=5000,importance="impurity",write.forest=TRUE,probability=FALSE,min.node.size=1,replace=F,dependent.variable.name="Affection")

rf
rf$confusion.matrix
rf$prediction.error

#selectfinalvars----------------------------------------------
rn<-round(rf$variable.importance,2)
dim(rn)
str(rn)
rn<-data.frame(as.list(rn))
rn.ranger=sort(rn, decreasing=T)[1:10000]
str(rn.ranger)
dim(rn.ranger)
names.sel=names(rn.ranger)
selectranger<-subset(dataselectmerge,select=c(which(names(dataselectmerge) %in% names.sel)))

dim(dataselectmerge)
dim(selectranger)
write.csv(rn.ranger,"rnranger")
write.csv(names.sel,"namesel")
write.csv(selectranger,"selectranger")

data <- read.table("C://Users/user/Desktop/cluname10000.txt",sep=",",header=T, col.names = c("num", "snp"))
a<-data[,2]
a<-as.vector(a)
require(data.table)
dataselectmerge<-fread("C:/Users/user/Desktop/BDA/data/dataselectmerge.csv",header=T,sep=",")
data10000<-subset(dataselectmerge,select=c(a))
dim(data10000)
data10000[,1]
write.csv(data10000,"clster10000.csv")
data <- read.csv("C://Users/user/Desktop/clster10000.csv",sep=",",header=T,na.strings=c(""))

#analyze--------------------------------------------
require(randomForest)
datafirst9<-fread("C:/Users/user/Desktop/BDA/data/naracvarsplit/datafirst9.csv",header=T,sep=",")
data<-cbind(datafirst9$Affection,data)
data<-data[,-2]
data[] <- lapply( data, factor) # the "[]" keeps the dataframe structure
 col_names <- names(data)
colnames(data)[1] <- "Affection"
str(data)

rf10000<-randomForest(Affection~.,data=data,importance=T,proximity=T,do.trace=200,ntree=1000,na.action=na.roughfix)

plot(rf10000,main="")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf10000, log="y",main="all selected 10000 snps set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf10000$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf10000,type=2,main="Variable Importance all selected 10000 snps set")


rn <- round(importance(rf10000), 2)
names<-dimnames(rn)[[1]][1:4400]
all4400<-data[ , which(names(data) %in% names)]
all4400<-setDF(all4400)
dim(all4400)
write.csv(all4400,"all4400.csv")

all4400<-cbind(datafirst9$Affection,all4400)
all4400[] <- lapply(all4400, factor) # the "[]" keeps the dataframe structure
 col_names <- names(all4400)
colnames(all4400)[1] <- "Affection"
str(all4400)

rf4400<-randomForest(Affection~.,data=all4400,importance=T,proximity=T,do.trace=1000,ntree=1000,na.action=na.roughfix)
rf4400.1<-randomForest(Affection~.,data=all4400,importance=T,proximity=T,do.trace=1000,ntree=1000,na.action=na.roughfix)
rf4400.2<-randomForest(Affection~.,data=all4400,importance=T,proximity=T,do.trace=1000,ntree=1000,na.action=na.roughfix)
rf4400.3<-randomForest(Affection~.,data=all4400,importance=T,proximity=T,do.trace=1000,ntree=1000,na.action=na.roughfix)
rf4400.4<-randomForest(Affection~.,data=all4400,importance=T,proximity=T,do.trace=1000,ntree=1000,na.action=na.roughfix)

plot(rf4400,main="")

layout(matrix(c(1,2),nrow=1),
       width=c(4,1)) 
par(mar=c(5,4,4,0)) #No margin on the right side
plot(rf4400, log="y",main="all selected 4400 snps set")
par(mar=c(5,0,4,2)) #No margin on the left side
plot(c(0,1),type="n", axes=F, xlab="", ylab="")
legend("top", colnames(rf4400$err.rate),col=1:4,cex=0.8,fill=1:4)

varImpPlot(rf4400,type=2,main="Variable Importance all selected 4400 snps set")






















